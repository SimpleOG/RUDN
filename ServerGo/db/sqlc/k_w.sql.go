// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: k_w.sql

package db

import (
	"context"
)

const create_k_w = `-- name: Create_k_w :one

INSERT INTO "k_w" ("semester_or_module",
                   "weeks_per_semester_module",
                   "type_of_educational_work",
                   "lecture_hours",
                   "laboratories_hours",
                   "practise_hours",
                   "type_of_pa_or_gia",
                   "kw_course_works",
                   "kw_course_projects",
                   "course_uch_ave_ze_on_rup",
                   "pr_ze_on_rup",
                   "nir_ze_by_rup")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, semester_or_module, weeks_per_semester_module, type_of_educational_work, lecture_hours, laboratories_hours, practise_hours, type_of_pa_or_gia, kw_course_works, kw_course_projects, course_uch_ave_ze_on_rup, pr_ze_on_rup, nir_ze_by_rup
`

type Create_k_wParams struct {
	SemesterOrModule       string `json:"semester_or_module"`
	WeeksPerSemesterModule int32  `json:"weeks_per_semester_module"`
	TypeOfEducationalWork  string `json:"type_of_educational_work"`
	LectureHours           int32  `json:"lecture_hours"`
	LaboratoriesHours      int32  `json:"laboratories_hours"`
	PractiseHours          int32  `json:"practise_hours"`
	TypeOfPaOrGia          string `json:"type_of_pa_or_gia"`
	KwCourseWorks          string `json:"kw_course_works"`
	KwCourseProjects       string `json:"kw_course_projects"`
	CourseUchAveZeOnRup    string `json:"course_uch_ave_ze_on_rup"`
	PrZeOnRup              string `json:"pr_ze_on_rup"`
	NirZeByRup             string `json:"nir_ze_by_rup"`
}

func (q *Queries) Create_k_w(ctx context.Context, arg Create_k_wParams) (KW, error) {
	row := q.db.QueryRow(ctx, create_k_w,
		arg.SemesterOrModule,
		arg.WeeksPerSemesterModule,
		arg.TypeOfEducationalWork,
		arg.LectureHours,
		arg.LaboratoriesHours,
		arg.PractiseHours,
		arg.TypeOfPaOrGia,
		arg.KwCourseWorks,
		arg.KwCourseProjects,
		arg.CourseUchAveZeOnRup,
		arg.PrZeOnRup,
		arg.NirZeByRup,
	)
	var i KW
	err := row.Scan(
		&i.ID,
		&i.SemesterOrModule,
		&i.WeeksPerSemesterModule,
		&i.TypeOfEducationalWork,
		&i.LectureHours,
		&i.LaboratoriesHours,
		&i.PractiseHours,
		&i.TypeOfPaOrGia,
		&i.KwCourseWorks,
		&i.KwCourseProjects,
		&i.CourseUchAveZeOnRup,
		&i.PrZeOnRup,
		&i.NirZeByRup,
	)
	return i, err
}

const get_k_w = `-- name: Get_k_w :one

SELECT id, semester_or_module, weeks_per_semester_module, type_of_educational_work, lecture_hours, laboratories_hours, practise_hours, type_of_pa_or_gia, kw_course_works, kw_course_projects, course_uch_ave_ze_on_rup, pr_ze_on_rup, nir_ze_by_rup
FROM k_w
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) Get_k_w(ctx context.Context, id int32) (KW, error) {
	row := q.db.QueryRow(ctx, get_k_w, id)
	var i KW
	err := row.Scan(
		&i.ID,
		&i.SemesterOrModule,
		&i.WeeksPerSemesterModule,
		&i.TypeOfEducationalWork,
		&i.LectureHours,
		&i.LaboratoriesHours,
		&i.PractiseHours,
		&i.TypeOfPaOrGia,
		&i.KwCourseWorks,
		&i.KwCourseProjects,
		&i.CourseUchAveZeOnRup,
		&i.PrZeOnRup,
		&i.NirZeByRup,
	)
	return i, err
}
