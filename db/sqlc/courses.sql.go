// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: courses.sql

package db

import (
	"context"
)

const createCourse = `-- name: CreateCourse :one
INSERT INTO courses (
    name,
    lecture_hours,
    laboratories_hours,
    practise_hours
) VALUES (
             $1, $2,$3,$4
         ) RETURNING id, name, lecture_hours, laboratories_hours, practise_hours
`

type CreateCourseParams struct {
	Name              string `json:"name"`
	LectureHours      int32  `json:"lecture_hours"`
	LaboratoriesHours int32  `json:"laboratories_hours"`
	PractiseHours     int32  `json:"practise_hours"`
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRow(ctx, createCourse,
		arg.Name,
		arg.LectureHours,
		arg.LaboratoriesHours,
		arg.PractiseHours,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LectureHours,
		&i.LaboratoriesHours,
		&i.PractiseHours,
	)
	return i, err
}

const getCourse = `-- name: GetCourse :one
SELECT id, name, lecture_hours, laboratories_hours, practise_hours FROM courses
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCourse(ctx context.Context, name string) (Course, error) {
	row := q.db.QueryRow(ctx, getCourse, name)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LectureHours,
		&i.LaboratoriesHours,
		&i.PractiseHours,
	)
	return i, err
}

const listAllCourses = `-- name: ListAllCourses :many
SELECT id, name, lecture_hours, laboratories_hours, practise_hours FROM courses
ORDER BY name
`

func (q *Queries) ListAllCourses(ctx context.Context) ([]Course, error) {
	rows, err := q.db.Query(ctx, listAllCourses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Course{}
	for rows.Next() {
		var i Course
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LectureHours,
			&i.LaboratoriesHours,
			&i.PractiseHours,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
