// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: courses_groups.sql

package db

import (
	"context"
)

const createGroupsCourse = `-- name: CreateGroupsCourse :one
INSERT INTO courses_groups (
    course_name,
    groups_id

) VALUES (
             $1, $2
         ) RETURNING course_name, groups_id
`

type CreateGroupsCourseParams struct {
	CourseName string `json:"course_name"`
	GroupsID   int32  `json:"groups_id"`
}

func (q *Queries) CreateGroupsCourse(ctx context.Context, arg CreateGroupsCourseParams) (CoursesGroup, error) {
	row := q.db.QueryRow(ctx, createGroupsCourse, arg.CourseName, arg.GroupsID)
	var i CoursesGroup
	err := row.Scan(&i.CourseName, &i.GroupsID)
	return i, err
}

const getGroupsCourse = `-- name: GetGroupsCourse :one
SELECT course_name, groups_id FROM courses_groups
WHERE course_name =$1 and groups_id=$2  LIMIT 1
`

type GetGroupsCourseParams struct {
	CourseName string `json:"course_name"`
	GroupsID   int32  `json:"groups_id"`
}

func (q *Queries) GetGroupsCourse(ctx context.Context, arg GetGroupsCourseParams) (CoursesGroup, error) {
	row := q.db.QueryRow(ctx, getGroupsCourse, arg.CourseName, arg.GroupsID)
	var i CoursesGroup
	err := row.Scan(&i.CourseName, &i.GroupsID)
	return i, err
}

const listAllGroupsCourse = `-- name: ListAllGroupsCourse :many
SELECT course_name, groups_id FROM courses_groups
ORDER BY course_name
`

func (q *Queries) ListAllGroupsCourse(ctx context.Context) ([]CoursesGroup, error) {
	rows, err := q.db.Query(ctx, listAllGroupsCourse)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CoursesGroup{}
	for rows.Next() {
		var i CoursesGroup
		if err := rows.Scan(&i.CourseName, &i.GroupsID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
