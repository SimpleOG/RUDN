// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: group.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    name,
    number
) VALUES (
             $1, $2
         ) RETURNING id, name, number
`

type CreateGroupParams struct {
	Name   string `json:"name"`
	Number int32  `json:"number"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.Number)
	var i Group
	err := row.Scan(&i.ID, &i.Name, &i.Number)
	return i, err
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, number FROM groups
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int32) (Group, error) {
	row := q.db.QueryRow(ctx, getGroup, id)
	var i Group
	err := row.Scan(&i.ID, &i.Name, &i.Number)
	return i, err
}

const listAllGroups = `-- name: ListAllGroups :many
SELECT id, name, number FROM groups
ORDER BY id
`

func (q *Queries) ListAllGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, listAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.ID, &i.Name, &i.Number); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllTeachersGroups = `-- name: ListAllTeachersGroups :many
   -- OFFSET $3;

SELECT teachers_id, groups_id, t.id, full_name, age, g.id, name, number FROM teachers_groups as tg
INNER  join teachers as t on tg.teachers_id = t.id
INNER join groups as g on tg.groups_id = g.id
WHERE t.id=$1
`

type ListAllTeachersGroupsRow struct {
	TeachersID int32  `json:"teachers_id"`
	GroupsID   int32  `json:"groups_id"`
	ID         int32  `json:"id"`
	FullName   string `json:"full_name"`
	Age        int32  `json:"age"`
	ID_2       int32  `json:"id_2"`
	Name       string `json:"name"`
	Number     int32  `json:"number"`
}

// LIMIT $2
func (q *Queries) ListAllTeachersGroups(ctx context.Context, id int32) ([]ListAllTeachersGroupsRow, error) {
	rows, err := q.db.Query(ctx, listAllTeachersGroups, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllTeachersGroupsRow{}
	for rows.Next() {
		var i ListAllTeachersGroupsRow
		if err := rows.Scan(
			&i.TeachersID,
			&i.GroupsID,
			&i.ID,
			&i.FullName,
			&i.Age,
			&i.ID_2,
			&i.Name,
			&i.Number,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
