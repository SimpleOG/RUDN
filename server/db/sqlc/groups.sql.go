// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: groups.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
    name,
    code,
    number
) VALUES (
             $1, $2,$3
         ) RETURNING id, code, number, name
`

type CreateGroupParams struct {
	Name   string `json:"name"`
	Code   string `json:"code"`
	Number int32  `json:"number"`
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup, arg.Name, arg.Code, arg.Number)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Number,
		&i.Name,
	)
	return i, err
}

const getGroup = `-- name: GetGroup :one
SELECT id, code, number, name FROM groups
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, name string) (Group, error) {
	row := q.db.QueryRow(ctx, getGroup, name)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Number,
		&i.Name,
	)
	return i, err
}

const listAllGroups = `-- name: ListAllGroups :many
SELECT id, code, number, name FROM groups
ORDER BY name
`

func (q *Queries) ListAllGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, listAllGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Number,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
