// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: teachers.sql

package db

import (
	"context"
)

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (
    full_name,
    department,
    post,
    conditions
) VALUES (
             $1, $2,$3,$4
         ) RETURNING id, full_name, department, post, conditions
`

type CreateTeacherParams struct {
	FullName   string `json:"full_name"`
	Department string `json:"department"`
	Post       string `json:"post"`
	Conditions string `json:"conditions"`
}

func (q *Queries) CreateTeacher(ctx context.Context, arg CreateTeacherParams) (Teacher, error) {
	row := q.db.QueryRow(ctx, createTeacher,
		arg.FullName,
		arg.Department,
		arg.Post,
		arg.Conditions,
	)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Department,
		&i.Post,
		&i.Conditions,
	)
	return i, err
}

const getTeacher = `-- name: GetTeacher :one
SELECT id, full_name, department, post, conditions FROM teachers
WHERE full_name = $1 LIMIT 1
`

func (q *Queries) GetTeacher(ctx context.Context, fullName string) (Teacher, error) {
	row := q.db.QueryRow(ctx, getTeacher, fullName)
	var i Teacher
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Department,
		&i.Post,
		&i.Conditions,
	)
	return i, err
}

const listAllTeachers = `-- name: ListAllTeachers :many
SELECT id, full_name, department, post, conditions FROM teachers
ORDER BY full_name
`

func (q *Queries) ListAllTeachers(ctx context.Context) ([]Teacher, error) {
	rows, err := q.db.Query(ctx, listAllTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Teacher{}
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Department,
			&i.Post,
			&i.Conditions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
