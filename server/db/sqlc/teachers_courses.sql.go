// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: teachers_courses.sql

package db

import (
	"context"
)

const createTeachersCourse = `-- name: CreateTeachersCourse :one
INSERT INTO teachers_courses (
    teachers_name,
    course_name
) VALUES (
             $1, $2
         ) RETURNING teachers_name, course_name
`

type CreateTeachersCourseParams struct {
	TeachersName string `json:"teachers_name"`
	CourseName   string `json:"course_name"`
}

func (q *Queries) CreateTeachersCourse(ctx context.Context, arg CreateTeachersCourseParams) (TeachersCourse, error) {
	row := q.db.QueryRow(ctx, createTeachersCourse, arg.TeachersName, arg.CourseName)
	var i TeachersCourse
	err := row.Scan(&i.TeachersName, &i.CourseName)
	return i, err
}

const getTeachersCourse = `-- name: GetTeachersCourse :one
SELECT teachers_name, course_name FROM teachers_courses
WHERE teachers_name =$1 and course_name=$2 LIMIT 1
`

type GetTeachersCourseParams struct {
	TeachersName string `json:"teachers_name"`
	CourseName   string `json:"course_name"`
}

func (q *Queries) GetTeachersCourse(ctx context.Context, arg GetTeachersCourseParams) (TeachersCourse, error) {
	row := q.db.QueryRow(ctx, getTeachersCourse, arg.TeachersName, arg.CourseName)
	var i TeachersCourse
	err := row.Scan(&i.TeachersName, &i.CourseName)
	return i, err
}

const listAllTeachersCourses = `-- name: ListAllTeachersCourses :many
SELECT teachers_name, course_name FROM teachers_courses  where teachers_name=$1
ORDER BY course_name
`

func (q *Queries) ListAllTeachersCourses(ctx context.Context, teachersName string) ([]TeachersCourse, error) {
	rows, err := q.db.Query(ctx, listAllTeachersCourses, teachersName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TeachersCourse{}
	for rows.Next() {
		var i TeachersCourse
		if err := rows.Scan(&i.TeachersName, &i.CourseName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
