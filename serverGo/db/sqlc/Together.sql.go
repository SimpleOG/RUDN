// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: together.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create_together = `-- name: Create_together :one
INSERT INTO "together"(program_id,
                       discipline_id,
                       group_id,
                       teacher_id,
                       k_w_id,
                       amount_id)

VALUES ($1, $2, $3, $4, $5, $6)
RETURNING program_id, discipline_id, teacher_id, group_id, k_w_id, amount_id
`

type Create_togetherParams struct {
	ProgramID    int32 `json:"program_id"`
	DisciplineID int32 `json:"discipline_id"`
	GroupID      int32 `json:"group_id"`
	TeacherID    int32 `json:"teacher_id"`
	KWID         int32 `json:"k_w_id"`
	AmountID     int32 `json:"amount_id"`
}

func (q *Queries) Create_together(ctx context.Context, arg Create_togetherParams) (Together, error) {
	row := q.db.QueryRow(ctx, create_together,
		arg.ProgramID,
		arg.DisciplineID,
		arg.GroupID,
		arg.TeacherID,
		arg.KWID,
		arg.AmountID,
	)
	var i Together
	err := row.Scan(
		&i.ProgramID,
		&i.DisciplineID,
		&i.TeacherID,
		&i.GroupID,
		&i.KWID,
		&i.AmountID,
	)
	return i, err
}

const teacher_Info = `-- name: Teacher_Info :one
select full_name, department,post,terms_of_attraction,
       round(cast(sum(total) as numeric),2 )                as total,
       round( cast(sum(lectures) as numeric)     ,2 )                     as lectures,
       round( cast(sum("practice_or_seminars") as numeric)  ,2 )          as practice,
       round( cast(sum("lab_works_or_clinical_classes") as numeric) ,2 )  as labs
from "information_about_PPS" i
         join together t  on  t.teacher_id = i.id
         join the_amount_of_teaching_work_of_the_teaching_staff as a on t.amount_id = a.id
where i.full_name=$1
group by  full_name,  department, post, terms_of_attraction
`

type Teacher_InfoRow struct {
	FullName          string         `json:"full_name"`
	Department        string         `json:"department"`
	Post              string         `json:"post"`
	TermsOfAttraction string         `json:"terms_of_attraction"`
	Total             pgtype.Numeric `json:"total"`
	Lectures          pgtype.Numeric `json:"lectures"`
	Practice          pgtype.Numeric `json:"practice"`
	Labs              pgtype.Numeric `json:"labs"`
}

func (q *Queries) Teacher_Info(ctx context.Context, fullName string) (Teacher_InfoRow, error) {
	row := q.db.QueryRow(ctx, teacher_Info, fullName)
	var i Teacher_InfoRow
	err := row.Scan(
		&i.FullName,
		&i.Department,
		&i.Post,
		&i.TermsOfAttraction,
		&i.Total,
		&i.Lectures,
		&i.Practice,
		&i.Labs,
	)
	return i, err
}
